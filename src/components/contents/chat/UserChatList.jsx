import { useState, useEffect, useCallback } from "react";
import { List, Avatar, Badge, Spin, Empty, Input, Button } from "antd";
import {
  UserOutlined,
  PaperClipOutlined,
  ReloadOutlined,
} from "@ant-design/icons";
import axios from "axios";
import { useSocket } from "../../../context/SocketContext";
import { useUser } from "../../../context/UserContext";
import PropTypes from "prop-types";
import { API_BASE_URL } from "../../../utils/baseApi";

const { Search } = Input;

// Import message component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
import { message as antMessage } from "antd";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
const playNotificationSound = () => {
  const audio = new Audio("/notification.mp3");
  audio
    .play()
    .catch((error) => console.log("Error playing notification sound:", error));
};

const UserChatList = ({ onSelectChat, selectedChat }) => {
  const [issues, setIssues] = useState([]);
  const [filteredIssues, setFilteredIssues] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchText, setSearchText] = useState("");
  const [refreshing, setRefreshing] = useState(false); // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
  const { socket } = useSocket();
  const { user } = useUser();

  // ‡πÅ‡∏õ‡∏•‡∏á fetchUserIssues ‡πÄ‡∏õ‡πá‡∏ô useCallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô
  const fetchUserIssues = useCallback(
    async (isRefreshing = false) => {
      try {
        if (isRefreshing) {
          setRefreshing(true);
        } else {
          setLoading(true);
        }

        const token = localStorage.getItem("token");
        const userId = user?.id || user?._id;

        if (!userId) {
          console.error("User ID is missing");
          setLoading(false);
          setRefreshing(false);
          return;
        }

        if (!token) {
          console.error("No token found, please log in again");
          antMessage.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
          setLoading(false);
          setRefreshing(false);
          return;
        }

        // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const response = await axios.get(
          `${API_BASE_URL}/reports/user/me`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        // console.log("User issues response:", response.data);

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
        let userIssues = [];
        if (response.data?.data && Array.isArray(response.data.data)) {
          userIssues = response.data.data;
        } else if (Array.isArray(response.data)) {
          userIssues = response.data;
        }

        // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "completed" ‡∏´‡∏£‡∏∑‡∏≠ "rejected"
        userIssues = userIssues.filter(
          (issue) => issue.status !== "completed" && issue.status !== "rejected"
        );

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
        const chatCountsPromises = userIssues.map(async (issue) => {
          try {
            const issueId = issue._id || issue.issueId;

            if (!token) {
              console.error("No token found, please log in again");
              return {
                issueId,
                unreadCount: 0,
                lastMessage: null,
              };
            }

            // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç endpoint ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ endpoint ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö admin ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° user
            const chatResponse = await axios.get(
              `${API_BASE_URL}/reports/chat/${issueId}/unread-count`,
              {
                headers: { Authorization: `Bearer ${token}` },
              }
            );

            // console.log(
            //   `Chat response for issue ${issueId}:`,
            //   chatResponse.data
            // );

            return {
              issueId,
              unreadCount: chatResponse.data?.data?.unreadCount || 0,
              lastMessage: chatResponse.data?.data?.lastMessage || null,
            };
          } catch (error) {
            console.error(
              `Error fetching chat counts for issue ${
                issue._id || issue.issueId
              }:`,
              error.response?.data || error.message
            );
            return {
              issueId: issue._id || issue.issueId,
              unreadCount: 0,
              lastMessage: null,
            };
          }
        });

        const chatCounts = await Promise.all(chatCountsPromises);

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
        const issuesList = userIssues.map((issue) => {
          const chatInfo = chatCounts.find(
            (chat) => chat.issueId === (issue._id || issue.issueId)
          ) || { unreadCount: 0, lastMessage: null };

          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
          const admin = issue.assignedAdmin || {};

          return {
            issueId: issue._id || issue.issueId,
            topic: issue.topic || issue.title || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠",
            status: issue.status || "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
            date: issue.date || issue.createdAt,
            lastActive: issue.updatedAt || issue.createdAt,
            unreadCount: chatInfo.unreadCount || 0,
            lastMessage: chatInfo.lastMessage?.message || null,
            lastMessageTime: chatInfo.lastMessage?.createdAt || null,
            adminName: admin.firstName
              ? `${admin.firstName} ${admin.lastName || ""}`
              : admin.name || "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
            adminProfileImage: admin.profileImage || admin.profilePicture,
          };
        });

        // console.log("Transformed issues:", issuesList);
        setIssues(issuesList);
        setFilteredIssues(issuesList);

        // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
        if (isRefreshing) {
          antMessage.success("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        }
      } catch (error) {
        console.error(
          "Error fetching user issues:",
          error.response?.data || error.message
        );
        antMessage.error("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ä‡∏ó‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á");
      } finally {
        setLoading(false);
        setRefreshing(false);
      }
    },
    [user]
  );

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    fetchUserIssues();
  }, [fetchUserIssues]);

  // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å socket
  useEffect(() => {
    if (!socket) return;

    // ‡∏•‡πâ‡∏≤‡∏á event listener ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    socket.off("newMessage");
    socket.off("issue_status_changed");

    const handleNewMessage = (messageData) => {
      console.log("Socket new message:", messageData);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      const isOwnMessage = messageData.senderId === (user?.id || user?._id);

      setIssues((prev) => {
        const updatedIssues = prev.map((issue) => {
          if (issue.issueId === messageData.issueId) {
            const lastMessage = messageData.fileUrl
              ? `üìé ${messageData.fileName || "‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö"}`
              : messageData.message;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const isMessageAlreadyDisplayed =
              issue.lastMessageTime &&
              messageData.createdAt &&
              new Date(issue.lastMessageTime).getTime() ===
                new Date(messageData.createdAt).getTime();

            if (isOwnMessage) {
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° unreadCount
              return {
                ...issue,
                // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤ 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å
                // lastMessage,
                // lastMessageTime: messageData.createdAt || new Date().toISOString(),
              };
            } else {
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° unreadCount (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏π‡πÅ‡∏ä‡∏ó‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà)
              return {
                ...issue,
                lastMessage,
                lastMessageTime:
                  messageData.createdAt || new Date().toISOString(),
                unreadCount: isMessageAlreadyDisplayed
                  ? issue.unreadCount // ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
                  : selectedChat?.issueId !== messageData.issueId
                  ? (issue.unreadCount || 0) + 1
                  : 0, // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
              };
            }
          }
          return issue;
        });

        return updatedIssues;
      });

      // ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö filteredIssues
      setFilteredIssues((prev) => {
        const updatedIssues = prev.map((issue) => {
          if (issue.issueId === messageData.issueId) {
            const lastMessage = messageData.fileUrl
              ? `üìé ${messageData.fileName || "‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö"}`
              : messageData.message;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const isMessageAlreadyDisplayed =
              issue.lastMessageTime &&
              messageData.createdAt &&
              new Date(issue.lastMessageTime).getTime() ===
                new Date(messageData.createdAt).getTime();

            if (isOwnMessage) {
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° unreadCount
              return {
                ...issue,
                // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤ 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å
                // lastMessage,
                // lastMessageTime: messageData.createdAt || new Date().toISOString(),
              };
            } else {
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° unreadCount (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏î‡∏π‡πÅ‡∏ä‡∏ó‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà)
              return {
                ...issue,
                lastMessage,
                lastMessageTime:
                  messageData.createdAt || new Date().toISOString(),
                unreadCount: isMessageAlreadyDisplayed
                  ? issue.unreadCount // ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
                  : selectedChat?.issueId !== messageData.issueId
                  ? (issue.unreadCount || 0) + 1
                  : 0, // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
              };
            }
          }
          return issue;
        });

        return updatedIssues;
      });

      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏ä‡∏ó‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà
      if (!isOwnMessage && selectedChat?.issueId !== messageData.issueId) {
        playNotificationSound();
      }
    };

    const handleStatusChanged = (data) => {
      if (data.status === "completed" || data.status === "rejected") {
        // ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        setIssues((prev) =>
          prev.filter((issue) => issue.issueId !== data.issueId)
        );
        setFilteredIssues((prev) =>
          prev.filter((issue) => issue.issueId !== data.issueId)
        );

        // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        if (selectedChat?.issueId === data.issueId) {
          antMessage.info(
            data.status === "completed"
              ? "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
              : "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
          );
        }
      } else {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        setIssues((prev) =>
          prev.map((issue) => {
            if (issue.issueId === data.issueId) {
              return {
                ...issue,
                status: data.status,
              };
            }
            return issue;
          })
        );

        setFilteredIssues((prev) =>
          prev.map((issue) => {
            if (issue.issueId === data.issueId) {
              return {
                ...issue,
                status: data.status,
              };
            }
            return issue;
          })
        );
      }
    };

    socket.on("newMessage", handleNewMessage);
    socket.on("issue_status_changed", handleStatusChanged);

    return () => {
      socket.off("newMessage", handleNewMessage);
      socket.off("issue_status_changed", handleStatusChanged);
    };
  }, [socket, selectedChat, user]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
  const handleSearch = (value) => {
    setSearchText(value);
    if (!value) {
      setFilteredIssues(issues);
      return;
    }

    const filtered = issues.filter(
      (issue) =>
        (issue.topic?.toLowerCase() || "").includes(value.toLowerCase()) ||
        (issue.adminName?.toLowerCase() || "").includes(value.toLowerCase())
    );
    setFilteredIssues(filtered);
  };

  // ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó
  const handleSelectChat = (issue) => {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô
    setIssues((prev) =>
      prev.map((i) =>
        i.issueId === issue.issueId ? { ...i, unreadCount: 0 } : i
      )
    );

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï filteredIssues ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Badge ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setFilteredIssues((prev) =>
      prev.map((i) =>
        i.issueId === issue.issueId ? { ...i, unreadCount: 0 } : i
      )
    );

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ö‡∏≠‡∏Å server ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß
    markAsRead(issue.issueId);

    // ‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
    onSelectChat(issue);
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á server ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß
  const markAsRead = async (issueId) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        return;
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      await axios.post(
        `${API_BASE_URL}/reports/chat/${issueId}/mark-read`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      // console.log(`Marked messages as read for issue ${issueId}`);
    } catch (error) {
      console.error(
        `Error marking messages as read for issue ${issueId}:`,
        error
      );
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
  const handleRefresh = () => {
    fetchUserIssues(true);
  };

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  const renderLastMessage = (issue) => {
    if (!issue.lastMessage) return null;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (issue.lastMessage.startsWith("üìé")) {
      return (
        <div className="text-xs text-blue-600 truncate">
          <PaperClipOutlined /> {issue.lastMessage.substring(2)}
        </div>
      );
    }

    return (
      <div className="text-xs text-gray-600 truncate">{issue.lastMessage}</div>
    );
  };

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
  const getStatusDisplay = (status) => {
    switch (status) {
      case "completed":
        return <span className="text-green-500">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</span>;
      case "approved":
        return <span className="text-blue-500">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</span>;
      case "rejected":
        return <span className="text-red-500">‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß</span>;
      default:
        return <span className="text-orange-500">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</span>;
    }
  };

  return (
    <div className="chat-list-container h-full flex flex-col">
      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Refresh */}
      <div className="p-3 border-b-gray-300 border-b">
        <div className="flex gap-2">
          <Search
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á..."
            value={searchText}
            onChange={(e) => handleSearch(e.target.value)}
            onSearch={handleSearch}
            className="flex-1"
          />
          <Button
            type="primary"
            icon={<ReloadOutlined />}
            loading={refreshing}
            onClick={handleRefresh}
            style={{
              backgroundColor: "#262362",
              transition: "background-color 0.3s",
              border: "none",
              borderRadius: "50%",
              height: "32px",
              width: "32px",
            }}
            onMouseEnter={(e) => (e.target.style.backgroundColor = "#193CB8")}
            onMouseLeave={(e) => (e.target.style.backgroundColor = "#262362")}
          />
        </div>
      </div>

      {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á */}
      {loading ? (
        <div className="flex justify-center items-center h-full">
          <Spin tip="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£..." />
        </div>
      ) : filteredIssues.length === 0 ? (
        <Empty
          description={
            searchText
              ? "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
              : "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ä‡∏ó‡πÑ‡∏î‡πâ"
          }
          className="my-10"
        />
      ) : (
        <List
          className="overflow-auto flex-1"
          dataSource={filteredIssues}
          renderItem={(issue) => (
            <List.Item
              className={`cursor-pointer hover:bg-gray-100 transition-colors ${
                selectedChat?.issueId === issue.issueId ? "bg-blue-50" : null
              }`}
              onClick={() => handleSelectChat(issue)}>
              <List.Item.Meta
                className="p-2"
                avatar={
                  <Badge
                    count={issue.unreadCount || 0}
                    dot={false}
                    overflowCount={99}>
                    <Avatar
                      src={issue.adminProfileImage}
                      icon={!issue.adminProfileImage && <UserOutlined />}
                      size="large"
                    />
                  </Badge>
                }
                title={
                  <div className="flex justify-between">
                    <span className="font-medium">{issue.adminName}</span>
                    {issue.lastActive && (
                      <span className="text-xs text-gray-400">
                        {new Date(issue.lastActive).toLocaleDateString()}
                      </span>
                    )}
                  </div>
                }
                description={
                  <div>
                    <div className="text-sm text-gray-800 truncate">
                      {issue.topic}
                    </div>
                    <div className="text-xs text-gray-500">
                      {getStatusDisplay(issue.status)}
                    </div>
                    {issue.lastMessage && renderLastMessage(issue)}
                  </div>
                }
              />
            </List.Item>
          )}
        />
      )}
    </div>
  );
};

// PropTypes
UserChatList.propTypes = {
  onSelectChat: PropTypes.func.isRequired,
  selectedChat: PropTypes.shape({
    issueId: PropTypes.string,
    adminName: PropTypes.string,
    adminProfileImage: PropTypes.string,
    topic: PropTypes.string,
    status: PropTypes.string,
  }),
};

export default UserChatList;
